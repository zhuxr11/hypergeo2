// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_hypergeo2_RCPPEXPORTS_H_GEN_
#define RCPP_hypergeo2_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace hypergeo2 {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("hypergeo2", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("hypergeo2", "_hypergeo2_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in hypergeo2");
            }
        }
    }

    inline RObject genhypergeo_vec(const List& U, const List& L, const NumericVector& z, const Nullable<List>& prec = R_NilValue, const LogicalVector& check_mode = true, const LogicalVector& log = false, const String& backend = "mpfr") {
        typedef SEXP(*Ptr_genhypergeo_vec)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_genhypergeo_vec p_genhypergeo_vec = NULL;
        if (p_genhypergeo_vec == NULL) {
            validateSignature("RObject(*genhypergeo_vec)(const List&,const List&,const NumericVector&,const Nullable<List>&,const LogicalVector&,const LogicalVector&,const String&)");
            p_genhypergeo_vec = (Ptr_genhypergeo_vec)R_GetCCallable("hypergeo2", "_hypergeo2_genhypergeo_vec");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_genhypergeo_vec(Shield<SEXP>(Rcpp::wrap(U)), Shield<SEXP>(Rcpp::wrap(L)), Shield<SEXP>(Rcpp::wrap(z)), Shield<SEXP>(Rcpp::wrap(prec)), Shield<SEXP>(Rcpp::wrap(check_mode)), Shield<SEXP>(Rcpp::wrap(log)), Shield<SEXP>(Rcpp::wrap(backend)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<RObject >(rcpp_result_gen);
    }

}

#endif // RCPP_hypergeo2_RCPPEXPORTS_H_GEN_
